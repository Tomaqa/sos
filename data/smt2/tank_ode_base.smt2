;;;; Water tank in SMT format with ODE simulation
;; `y' denotes water level
;; `delta' denotes latency of pump command
;; `tau' controls latency progress
;;   and is zeroed after executing pump command
;; `pump' denotes pump or wait mode
;; `on' stands for inflow mode
;; Additional invariants are reasonable:
;; `y >= 0 & y <= tank_volume'
;; `inflow > outflow' ?

(set-option :print-success false)
(set-option :produce-models true)
(set-logic QF_UFLRA)

;;; Constants

(define-fun t0   () Real 0.0)

(define-fun y0   () Real 60.0)
(define-fun tau0 () Real  0.0)

(define-fun on0   () Bool true)
(define-fun pump0 () Bool true)

(define-fun ymin () Real 30.0)
(define-fun ymax () Real 80.0)

(define-fun inflow  () Real 40.0)
(define-fun outflow () Real 20.0)

(define-fun delta () Real 1.5)

(define-fun T () Real 1.0)

;;; Declarations

(declare-fun t_0  () Real)
(declare-fun t_1  () Real)
(declare-fun t_2  () Real)
(declare-fun t_3  () Real)
(declare-fun t_4  () Real)
(declare-fun t_5  () Real)
(declare-fun t_6  () Real)
(declare-fun t_7  () Real)
(declare-fun t_8  () Real)
(declare-fun t_9  () Real)
(declare-fun t_10 () Real)
(declare-fun t_11 () Real)
(declare-fun t_12 () Real)
(declare-fun t_13 () Real)
(declare-fun t_14 () Real)
(declare-fun t_15 () Real)
(declare-fun t_16 () Real)
(declare-fun t_17 () Real)
(declare-fun t_18 () Real)
(declare-fun t_19 () Real)

(declare-fun y_0  () Real)
(declare-fun y_1  () Real)
(declare-fun y_2  () Real)
(declare-fun y_3  () Real)
(declare-fun y_4  () Real)
(declare-fun y_5  () Real)
(declare-fun y_6  () Real)
(declare-fun y_7  () Real)
(declare-fun y_8  () Real)
(declare-fun y_9  () Real)
(declare-fun y_10 () Real)
(declare-fun y_11 () Real)
(declare-fun y_12 () Real)
(declare-fun y_13 () Real)
(declare-fun y_14 () Real)
(declare-fun y_15 () Real)
(declare-fun y_16 () Real)
(declare-fun y_17 () Real)
(declare-fun y_18 () Real)
(declare-fun y_19 () Real)

(declare-fun tau_0_1  () Real)
(declare-fun tau_1_1  () Real)
(declare-fun tau_2_1  () Real)
(declare-fun tau_3_1  () Real)
(declare-fun tau_4_1  () Real)
(declare-fun tau_5_1  () Real)
(declare-fun tau_6_1  () Real)
(declare-fun tau_7_1  () Real)
(declare-fun tau_8_1  () Real)
(declare-fun tau_9_1  () Real)
(declare-fun tau_10_1 () Real)
(declare-fun tau_11_1 () Real)
(declare-fun tau_12_1 () Real)
(declare-fun tau_13_1 () Real)
(declare-fun tau_14_1 () Real)
(declare-fun tau_15_1 () Real)
(declare-fun tau_16_1 () Real)
(declare-fun tau_17_1 () Real)
(declare-fun tau_18_1 () Real)
(declare-fun tau_19_1 () Real)
(declare-fun tau_0_2  () Real)
(declare-fun tau_1_2  () Real)
(declare-fun tau_2_2  () Real)
(declare-fun tau_3_2  () Real)
(declare-fun tau_4_2  () Real)
(declare-fun tau_5_2  () Real)
(declare-fun tau_6_2  () Real)
(declare-fun tau_7_2  () Real)
(declare-fun tau_8_2  () Real)
(declare-fun tau_9_2  () Real)
(declare-fun tau_10_2 () Real)
(declare-fun tau_11_2 () Real)
(declare-fun tau_12_2 () Real)
(declare-fun tau_13_2 () Real)
(declare-fun tau_14_2 () Real)
(declare-fun tau_15_2 () Real)
(declare-fun tau_16_2 () Real)
(declare-fun tau_17_2 () Real)
(declare-fun tau_18_2 () Real)
(declare-fun tau_19_2 () Real)

(declare-fun on_0  () Bool)
(declare-fun on_1  () Bool)
(declare-fun on_2  () Bool)
(declare-fun on_3  () Bool)
(declare-fun on_4  () Bool)
(declare-fun on_5  () Bool)
(declare-fun on_6  () Bool)
(declare-fun on_7  () Bool)
(declare-fun on_8  () Bool)
(declare-fun on_9  () Bool)
(declare-fun on_10 () Bool)
(declare-fun on_11 () Bool)
(declare-fun on_12 () Bool)
(declare-fun on_13 () Bool)
(declare-fun on_14 () Bool)
(declare-fun on_15 () Bool)
(declare-fun on_16 () Bool)
(declare-fun on_17 () Bool)
(declare-fun on_18 () Bool)
(declare-fun on_19 () Bool)

(declare-fun pump_0  () Bool)
(declare-fun pump_1  () Bool)
(declare-fun pump_2  () Bool)
(declare-fun pump_3  () Bool)
(declare-fun pump_4  () Bool)
(declare-fun pump_5  () Bool)
(declare-fun pump_6  () Bool)
(declare-fun pump_7  () Bool)
(declare-fun pump_8  () Bool)
(declare-fun pump_9  () Bool)
(declare-fun pump_10 () Bool)
(declare-fun pump_11 () Bool)
(declare-fun pump_12 () Bool)
(declare-fun pump_13 () Bool)
(declare-fun pump_14 () Bool)
(declare-fun pump_15 () Bool)
(declare-fun pump_16 () Bool)
(declare-fun pump_17 () Bool)
(declare-fun pump_18 () Bool)
(declare-fun pump_19 () Bool)

(declare-fun dy_0  () Real)
(declare-fun dy_1  () Real)
(declare-fun dy_2  () Real)
(declare-fun dy_3  () Real)
(declare-fun dy_4  () Real)
(declare-fun dy_5  () Real)
(declare-fun dy_6  () Real)
(declare-fun dy_7  () Real)
(declare-fun dy_8  () Real)
(declare-fun dy_9  () Real)
(declare-fun dy_10 () Real)
(declare-fun dy_11 () Real)
(declare-fun dy_12 () Real)
(declare-fun dy_13 () Real)
(declare-fun dy_14 () Real)
(declare-fun dy_15 () Real)
(declare-fun dy_16 () Real)
(declare-fun dy_17 () Real)
(declare-fun dy_18 () Real)

(declare-fun dtau_0  () Real)
(declare-fun dtau_1  () Real)
(declare-fun dtau_2  () Real)
(declare-fun dtau_3  () Real)
(declare-fun dtau_4  () Real)
(declare-fun dtau_5  () Real)
(declare-fun dtau_6  () Real)
(declare-fun dtau_7  () Real)
(declare-fun dtau_8  () Real)
(declare-fun dtau_9  () Real)
(declare-fun dtau_10 () Real)
(declare-fun dtau_11 () Real)
(declare-fun dtau_12 () Real)
(declare-fun dtau_13 () Real)
(declare-fun dtau_14 () Real)
(declare-fun dtau_15 () Real)
(declare-fun dtau_16 () Real)
(declare-fun dtau_17 () Real)
(declare-fun dtau_18 () Real)

;;; Initializations

(assert (and (= t_0 t0) (= y_0 y0)
             (= tau_0_1 tau_0_2 tau0)
             (= on_0 on0) (= pump_0 pump0)
))

;;; Steps definition

(assert (and (= t_1  (+ t_0  T))
             (= t_2  (+ t_1  T))
             (= t_3  (+ t_2  T))
             (= t_4  (+ t_3  T))
             (= t_5  (+ t_4  T))
             (= t_6  (+ t_5  T))
             (= t_7  (+ t_6  T))
             (= t_8  (+ t_7  T))
             (= t_9  (+ t_8  T))
             (= t_10 (+ t_9  T))
             (= t_11 (+ t_10 T))
             (= t_12 (+ t_11 T))
             (= t_13 (+ t_12 T))
             (= t_14 (+ t_13 T))
             (= t_15 (+ t_14 T))
             (= t_16 (+ t_15 T))
             (= t_17 (+ t_16 T))
             (= t_18 (+ t_17 T))
             (= t_19 (+ t_18 T))
))

;;; Derivatives definition

;(define-dt dy_out y (- outflow))
;(define-dt dy_in  y (- inflow outflow))
(define-fun dy_out () Real 0.0)
(define-fun dy_in  () Real 1.0)

;(define-dt dtau_wait tau 1)
;(define-dt dtau_pump tau 0)
(define-fun dtau_wait () Real 0.0)
(define-fun dtau_pump () Real 1.0)

;;; Derivatives connection

(declare-fun dt-int (Real Real Real Real) Real)

(define-fun connect ((on1 Bool)  (pump1 Bool)
                     (dy1 Real)  (dtau1 Real)
                     (t1 Real)   (t2 Real)
                     (y1 Real)   (y2 Real)
                     (tau1 Real) (tau2 Real)) Bool
    (and (or (and      on1       pump1  (= dy1 dy_in ) (= dtau1 dtau_pump))
             (and (not on1) (not pump1) (= dy1 dy_in ) (= dtau1 dtau_wait))
             (and (not on1)      pump1  (= dy1 dy_out) (= dtau1 dtau_pump))
             (and      on1  (not pump1) (= dy1 dy_out) (= dtau1 dtau_wait)) )
         (= y2   (dt-int dy1 t1 t2 y1))
         (= tau2 (dt-int dtau1 t1 t2 tau1))
))

(assert (and (connect on_0  pump_0  dy_0  dtau_0  t_0  t_1  y_0  y_1  tau_0_2  tau_1_1)
             (connect on_1  pump_1  dy_1  dtau_1  t_1  t_2  y_1  y_2  tau_1_2  tau_2_1)
             (connect on_2  pump_2  dy_2  dtau_2  t_2  t_3  y_2  y_3  tau_2_2  tau_3_1)
             (connect on_3  pump_3  dy_3  dtau_3  t_3  t_4  y_3  y_4  tau_3_2  tau_4_1)
             (connect on_4  pump_4  dy_4  dtau_4  t_4  t_5  y_4  y_5  tau_4_2  tau_5_1)
             (connect on_5  pump_5  dy_5  dtau_5  t_5  t_6  y_5  y_6  tau_5_2  tau_6_1)
             (connect on_6  pump_6  dy_6  dtau_6  t_6  t_7  y_6  y_7  tau_6_2  tau_7_1)
             (connect on_7  pump_7  dy_7  dtau_7  t_7  t_8  y_7  y_8  tau_7_2  tau_8_1)
             (connect on_8  pump_8  dy_8  dtau_8  t_8  t_9  y_8  y_9  tau_8_2  tau_9_1)
             (connect on_9  pump_9  dy_9  dtau_9  t_9  t_10 y_9  y_10 tau_9_2  tau_10_1)
             (connect on_10 pump_10 dy_10 dtau_10 t_10 t_11 y_10 y_11 tau_10_2 tau_11_1)
             (connect on_11 pump_11 dy_11 dtau_11 t_11 t_12 y_11 y_12 tau_11_2 tau_12_1)
             (connect on_12 pump_12 dy_12 dtau_12 t_12 t_13 y_12 y_13 tau_12_2 tau_13_1)
             (connect on_13 pump_13 dy_13 dtau_13 t_13 t_14 y_13 y_14 tau_13_2 tau_14_1)
             (connect on_14 pump_14 dy_14 dtau_14 t_14 t_15 y_14 y_15 tau_14_2 tau_15_1)
             (connect on_15 pump_15 dy_15 dtau_15 t_15 t_16 y_15 y_16 tau_15_2 tau_16_1)
             (connect on_16 pump_16 dy_16 dtau_16 t_16 t_17 y_16 y_17 tau_16_2 tau_17_1)
             (connect on_17 pump_17 dy_17 dtau_17 t_17 t_18 y_17 y_18 tau_17_2 tau_18_1)
             (connect on_18 pump_18 dy_18 dtau_18 t_18 t_19 y_18 y_19 tau_18_2 tau_19_1)
))

;;; Jump conditions

(define-fun jump ((on1 Bool)   (on2 Bool)
                  (pump1 Bool) (pump2 Bool)
                  (y2 Real)
                  (tau2_1 Real)(tau2_2 Real)) Bool
    (or (and      on1       pump1       on2       pump2  (<  y2 ymax     ) (= tau2_2 tau2_1))
        (and      on1       pump1  (not on2) (not pump2) (>= y2 ymax     ) (= tau2_2 0.0))
        (and (not on1) (not pump1) (not on2) (not pump2) (<  tau2_1 delta) (= tau2_2 tau2_1))
        (and (not on1) (not pump1) (not on2)      pump2  (>= tau2_1 delta) (= tau2_2 tau2_1))
        (and (not on1)      pump1  (not on2)      pump2  (>  y2 ymin     ) (= tau2_2 tau2_1))
        (and (not on1)      pump1       on2  (not pump2) (<= y2 ymin     ) (= tau2_2 0.0))
        (and      on1  (not pump1)      on2  (not pump2) (<  tau2_1 delta) (= tau2_2 tau2_1))
        (and      on1  (not pump1)      on2       pump2  (>= tau2_1 delta) (= tau2_2 tau2_1))
))

(assert (and (jump on_0  on_1  pump_0  pump_1  y_1  tau_1_1  tau_1_2)
             (jump on_1  on_2  pump_1  pump_2  y_2  tau_2_1  tau_2_2)
             (jump on_2  on_3  pump_2  pump_3  y_3  tau_3_1  tau_3_2)
             (jump on_3  on_4  pump_3  pump_4  y_4  tau_4_1  tau_4_2)
             (jump on_4  on_5  pump_4  pump_5  y_5  tau_5_1  tau_5_2)
             (jump on_5  on_6  pump_5  pump_6  y_6  tau_6_1  tau_6_2)
             (jump on_6  on_7  pump_6  pump_7  y_7  tau_7_1  tau_7_2)
             (jump on_7  on_8  pump_7  pump_8  y_8  tau_8_1  tau_8_2)
             (jump on_8  on_9  pump_8  pump_9  y_9  tau_9_1  tau_9_2)
             (jump on_9  on_10 pump_9  pump_10 y_10 tau_10_1 tau_10_2)
             (jump on_10 on_11 pump_10 pump_11 y_11 tau_11_1 tau_11_2)
             (jump on_11 on_12 pump_11 pump_12 y_12 tau_12_1 tau_12_2)
             (jump on_12 on_13 pump_12 pump_13 y_13 tau_13_1 tau_13_2)
             (jump on_13 on_14 pump_13 pump_14 y_14 tau_14_1 tau_14_2)
             (jump on_14 on_15 pump_14 pump_15 y_15 tau_15_1 tau_15_2)
             (jump on_15 on_16 pump_15 pump_16 y_16 tau_16_1 tau_16_2)
             (jump on_16 on_17 pump_16 pump_17 y_17 tau_17_1 tau_17_2)
             (jump on_17 on_18 pump_17 pump_18 y_18 tau_18_1 tau_18_2)
             (jump on_18 on_19 pump_18 pump_19 y_19 tau_19_1 tau_19_2)
))

;;;;;;;;;;;;;;;;;;;;;;;;;;
