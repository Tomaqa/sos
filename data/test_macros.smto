;;;; Function choosing model in SMT+ODE format
;; `y' is continuous state
;; `(inc)' is discrete state


;;; Constants

;$(+ 5 (* 6 100))
;$()

#if $(>= 1 1)
(fdhsdf) ($(+ 5 (* 6 100)))
#else
 ( asfas) (jkt)
#endif


;#define STEPS 5
#def STEPS(j) (1 2 #i 4 5) #enddef


#let i 50
#define i 50000
(+ 5 #STEPS(3))
#endlet i

;(#STEPS)

#def XY
#if 0
#else
  nic
#endif
#enddef

#def DESC(n)
#if $( = #n 0 )
#else
  #n #DESC( $(- #n 1) )
#endif
#enddef

#def ASC(n)
#if $( = #n 0 )
#else
  #ASC( $(- #n 1) ) #n
#endif
#enddef

#define N 5
;#define FACT(n) (* #ASC(#n))
#def FACT(n)
#if $(= #n 0)
    *
#else
    #FACT( $d(- #n 1) ) #n
#endif
#enddef

(#DESC(10))
(#ASC(10))
(#FACT(4))
(assert (= $(#FACT(#N)) 120) )

;( $i(+ 10 #FACT(5)) )
( $i(+ 10 (#FACT(5))) )

#define A 5
(#A)

(define-fun T (#XY) Real 1)

#def XYZ
#if 1
#endif
#enddef

( !!!!!!!!!! )
#define a 1
( $(and #a) )

#STEPS(1)
#XYZ

#define S 5

( $d(+ 5 #S) )

#for (i 0 #S)
  (#i)
#endfor

#define x 0

(define-fun t#x##_#x () Real 1)
(define-fun #x##_#x () Real 1)

(define-fun sqr0   () Real t0)
(define-fun sqrt0  () Real t0)

(define-fun y0   () Real t0)

(define-fun inc0 () Bool true)

;;; Constant invariants

#def FUN(param empty)
#let i 1
#let par #if $(not #empty) #param##_#i #endif
    (#par)
    ;(#param)
#endlet par
#endlet i
#enddef

#FUN(x 0)
;#FUN(x 1)

#define Q

(#Q)

;#let q #if 1 #endif
;#let q #if 1 ## #endif
;#let q 1
;#let q ##
#let q ##
(#q)
#endlet q

;#define #g 5

;#let #g
;#endlet #g

( $f (+ 5 $d(- 6 $(- 2)) ) )
( $d (- 3.5 1.9) )
( $f(+ $f(- 3.5 1.9) ))
( $d(+ $f(- 3.5 1.9) ))

#define BIG 0
#define HUGE 0
#if $ (or #BIG #HUGE)  #define ST 1000
#else                  #define ST 10
#endif
;...
#def INT_ODE(f)
#for (i 0 $(- #ST 1))
#let j $d(+ #i 1)
    (= #f##_#j (int-ode #f d#f##_#i (#f##_#i t_#i t_#j) ()) )
#endlet j
#endfor
#enddef

(assert (and #INT_ODE(x)
             #INT_ODE(y)
))

( # )
( ## )
( ### )

#define seq 1 2 3
( #seq )
( #seq# )
( #seq## )
( #seq### )
( ##seq )
( ###seq )
( ####seq )
( ##FACT(5) )
( ###FACT(5) )

#define M() 5
#def SUM_SQR(M) (+
  #for (i 0 #M)  ;; equivalent to: #for (i 0 (<= #i #M) (+ #i 1))
                 ;; equivalent to: #for (i (0 1 2 3 4 5))
  #let expr ((+ #i 1))
      (* #i #expr)
  #endlet expr
  #endfor
) #enddef
#SUM_SQR(#M)

#define PRINT(x) #x

( #PRINT(x) )
( #PRINT(M) )
( #PRINT(#M) )
( #PRINT(\#M) )

;#M
;\#M

( #M )
( \#M )

#define M5() 1

( #PRINT(\#M5) )
( #PRINT(\#M#M) )
( #PRINT(\#M\#M) )


#for (i 0 3)
#for (j 0 3)
  (a_#i##_#j)
#endfor
#endfor

