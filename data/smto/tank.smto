;;;; Thermostat in SMT+ODE format
;; `y' denotes water level
;; `delta' denotes latency of pump command
;; `tau' controls latency progress
;;   and is zeroed after executing pump command
;; `pump' denotes pump or wait mode
;; `on' stands for inflow mode
;; Additional invariants are reasonable:
;; `y >= 0 & y <= tank_volume'
;; `inflow > outflow' ?


;;; Constants

(define-fun t0   () Real 0)

(define-fun y0   () Real 60)
(define-fun tau0 () Real  0)

(define-fun on0   () Bool true)
(define-fun pump0 () Bool true)

(define-fun ymin () Real 30)
(define-fun ymax () Real 80)

;(define-fun inflow  () Real 40)
;(define-fun outflow () Real 20)

(define-fun delta () Real 1.0)

(define-fun T () Real 1.0)

;;; Declarations

(declare-fun t_0  () Real)
(declare-fun t_1  () Real)
(declare-fun t_2  () Real)
(declare-fun t_3  () Real)
(declare-fun t_4  () Real)
(declare-fun t_5  () Real)
(declare-fun t_6  () Real)
(declare-fun t_7  () Real)
(declare-fun t_8  () Real)
(declare-fun t_9  () Real)
(declare-fun t_10 () Real)
(declare-fun t_11 () Real)
(declare-fun t_12 () Real)
(declare-fun t_13 () Real)
(declare-fun t_14 () Real)
(declare-fun t_15 () Real)
(declare-fun t_16 () Real)
(declare-fun t_17 () Real)
(declare-fun t_18 () Real)
(declare-fun t_19 () Real)

(declare-fun y_0  () Real)
(declare-fun y_1  () Real)
(declare-fun y_2  () Real)
(declare-fun y_3  () Real)
(declare-fun y_4  () Real)
(declare-fun y_5  () Real)
(declare-fun y_6  () Real)
(declare-fun y_7  () Real)
(declare-fun y_8  () Real)
(declare-fun y_9  () Real)
(declare-fun y_10 () Real)
(declare-fun y_11 () Real)
(declare-fun y_12 () Real)
(declare-fun y_13 () Real)
(declare-fun y_14 () Real)
(declare-fun y_15 () Real)
(declare-fun y_16 () Real)
(declare-fun y_17 () Real)
(declare-fun y_18 () Real)
(declare-fun y_19 () Real)

;(declare-fun tau_0_1  () Real)
;(declare-fun tau_1_1  () Real)
;(declare-fun tau_2_1  () Real)
;(declare-fun tau_3_1  () Real)
;(declare-fun tau_4_1  () Real)
;(declare-fun tau_5_1  () Real)
;(declare-fun tau_6_1  () Real)
;(declare-fun tau_7_1  () Real)
;(declare-fun tau_8_1  () Real)
;(declare-fun tau_9_1  () Real)
;(declare-fun tau_10_1 () Real)
;(declare-fun tau_11_1 () Real)
;(declare-fun tau_12_1 () Real)
;(declare-fun tau_13_1 () Real)
;(declare-fun tau_14_1 () Real)
;(declare-fun tau_15_1 () Real)
;(declare-fun tau_16_1 () Real)
;(declare-fun tau_17_1 () Real)
;(declare-fun tau_18_1 () Real)
;(declare-fun tau_19_1 () Real)
;(declare-fun tau_0_2  () Real)
;(declare-fun tau_1_2  () Real)
;(declare-fun tau_2_2  () Real)
;(declare-fun tau_3_2  () Real)
;(declare-fun tau_4_2  () Real)
;(declare-fun tau_5_2  () Real)
;(declare-fun tau_6_2  () Real)
;(declare-fun tau_7_2  () Real)
;(declare-fun tau_8_2  () Real)
;(declare-fun tau_9_2  () Real)
;(declare-fun tau_10_2 () Real)
;(declare-fun tau_11_2 () Real)
;(declare-fun tau_12_2 () Real)
;(declare-fun tau_13_2 () Real)
;(declare-fun tau_14_2 () Real)
;(declare-fun tau_15_2 () Real)
;(declare-fun tau_16_2 () Real)
;(declare-fun tau_17_2 () Real)
;(declare-fun tau_18_2 () Real)
;(declare-fun tau_19_2 () Real)
(declare-fun tau_1_0  () Real)
(declare-fun tau_1_1  () Real)
(declare-fun tau_1_2  () Real)
(declare-fun tau_1_3  () Real)
(declare-fun tau_1_4  () Real)
(declare-fun tau_1_5  () Real)
(declare-fun tau_1_6  () Real)
(declare-fun tau_1_7  () Real)
(declare-fun tau_1_8  () Real)
(declare-fun tau_1_9  () Real)
(declare-fun tau_1_10 () Real)
(declare-fun tau_1_11 () Real)
(declare-fun tau_1_12 () Real)
(declare-fun tau_1_13 () Real)
(declare-fun tau_1_14 () Real)
(declare-fun tau_1_15 () Real)
(declare-fun tau_1_16 () Real)
(declare-fun tau_1_17 () Real)
(declare-fun tau_1_18 () Real)
(declare-fun tau_1_19 () Real)
(declare-fun tau_2_0  () Real)
(declare-fun tau_2_1  () Real)
(declare-fun tau_2_2  () Real)
(declare-fun tau_2_3  () Real)
(declare-fun tau_2_4  () Real)
(declare-fun tau_2_5  () Real)
(declare-fun tau_2_6  () Real)
(declare-fun tau_2_7  () Real)
(declare-fun tau_2_8  () Real)
(declare-fun tau_2_9  () Real)
(declare-fun tau_2_10 () Real)
(declare-fun tau_2_11 () Real)
(declare-fun tau_2_12 () Real)
(declare-fun tau_2_13 () Real)
(declare-fun tau_2_14 () Real)
(declare-fun tau_2_15 () Real)
(declare-fun tau_2_16 () Real)
(declare-fun tau_2_17 () Real)
(declare-fun tau_2_18 () Real)
(declare-fun tau_2_19 () Real)

(declare-fun on_0  () Bool)
(declare-fun on_1  () Bool)
(declare-fun on_2  () Bool)
(declare-fun on_3  () Bool)
(declare-fun on_4  () Bool)
(declare-fun on_5  () Bool)
(declare-fun on_6  () Bool)
(declare-fun on_7  () Bool)
(declare-fun on_8  () Bool)
(declare-fun on_9  () Bool)
(declare-fun on_10 () Bool)
(declare-fun on_11 () Bool)
(declare-fun on_12 () Bool)
(declare-fun on_13 () Bool)
(declare-fun on_14 () Bool)
(declare-fun on_15 () Bool)
(declare-fun on_16 () Bool)
(declare-fun on_17 () Bool)
(declare-fun on_18 () Bool)
(declare-fun on_19 () Bool)

(declare-fun pump_0  () Bool)
(declare-fun pump_1  () Bool)
(declare-fun pump_2  () Bool)
(declare-fun pump_3  () Bool)
(declare-fun pump_4  () Bool)
(declare-fun pump_5  () Bool)
(declare-fun pump_6  () Bool)
(declare-fun pump_7  () Bool)
(declare-fun pump_8  () Bool)
(declare-fun pump_9  () Bool)
(declare-fun pump_10 () Bool)
(declare-fun pump_11 () Bool)
(declare-fun pump_12 () Bool)
(declare-fun pump_13 () Bool)
(declare-fun pump_14 () Bool)
(declare-fun pump_15 () Bool)
(declare-fun pump_16 () Bool)
(declare-fun pump_17 () Bool)
(declare-fun pump_18 () Bool)
(declare-fun pump_19 () Bool)

(declare-fun dy_0  () Dt)
(declare-fun dy_1  () Dt)
(declare-fun dy_2  () Dt)
(declare-fun dy_3  () Dt)
(declare-fun dy_4  () Dt)
(declare-fun dy_5  () Dt)
(declare-fun dy_6  () Dt)
(declare-fun dy_7  () Dt)
(declare-fun dy_8  () Dt)
(declare-fun dy_9  () Dt)
(declare-fun dy_10 () Dt)
(declare-fun dy_11 () Dt)
(declare-fun dy_12 () Dt)
(declare-fun dy_13 () Dt)
(declare-fun dy_14 () Dt)
(declare-fun dy_15 () Dt)
(declare-fun dy_16 () Dt)
(declare-fun dy_17 () Dt)
(declare-fun dy_18 () Dt)

(declare-fun dtau_0  () Dt)
(declare-fun dtau_1  () Dt)
(declare-fun dtau_2  () Dt)
(declare-fun dtau_3  () Dt)
(declare-fun dtau_4  () Dt)
(declare-fun dtau_5  () Dt)
(declare-fun dtau_6  () Dt)
(declare-fun dtau_7  () Dt)
(declare-fun dtau_8  () Dt)
(declare-fun dtau_9  () Dt)
(declare-fun dtau_10 () Dt)
(declare-fun dtau_11 () Dt)
(declare-fun dtau_12 () Dt)
(declare-fun dtau_13 () Dt)
(declare-fun dtau_14 () Dt)
(declare-fun dtau_15 () Dt)
(declare-fun dtau_16 () Dt)
(declare-fun dtau_17 () Dt)
(declare-fun dtau_18 () Dt)

;;; Initializations

(assert (and (= t_0 t0) (= y_0 y0)
             ;(= tau_0_1 tau_0_2 tau0)
             (= tau_1_0 tau_2_0 tau0)
             (= on_0 on0) (= pump_0 pump0)
))

;;; Steps definition

(assert (and (= t_1  (+ t_0  T))
             (= t_2  (+ t_1  T))
             (= t_3  (+ t_2  T))
             (= t_4  (+ t_3  T))
             (= t_5  (+ t_4  T))
             (= t_6  (+ t_5  T))
             (= t_7  (+ t_6  T))
             (= t_8  (+ t_7  T))
             (= t_9  (+ t_8  T))
             (= t_10 (+ t_9  T))
             (= t_11 (+ t_10 T))
             (= t_12 (+ t_11 T))
             (= t_13 (+ t_12 T))
             (= t_14 (+ t_13 T))
             (= t_15 (+ t_14 T))
             (= t_16 (+ t_15 T))
             (= t_17 (+ t_16 T))
             (= t_18 (+ t_17 T))
             (= t_19 (+ t_18 T))
))

;;; Derivatives declaration and definition

(declare-ode y (dy_in dy_out) ())
;(define-dt dy_in  () (- inflow outflow))
;(define-dt dy_out () (- outflow))
(define-dt dy_in  () (- 40 20))
(define-dt dy_out () (- 20))

;(declare-ode tau (dtau_wait dtau_pump) ())
(declare-ode tau_1 (dtau_wait dtau_pump) ())
(define-dt dtau_wait () 1)
(define-dt dtau_pump () 0)

;;; Integration

(assert (and (= y_1  (int-ode y dy_0  (y_0  t_0  t_1)  ()))
             (= y_2  (int-ode y dy_1  (y_1  t_1  t_2)  ()))
             (= y_3  (int-ode y dy_2  (y_2  t_2  t_3)  ()))
             (= y_4  (int-ode y dy_3  (y_3  t_3  t_4)  ()))
             (= y_5  (int-ode y dy_4  (y_4  t_4  t_5)  ()))
             (= y_6  (int-ode y dy_5  (y_5  t_5  t_6)  ()))
             (= y_7  (int-ode y dy_6  (y_6  t_6  t_7)  ()))
             (= y_8  (int-ode y dy_7  (y_7  t_7  t_8)  ()))
             (= y_9  (int-ode y dy_8  (y_8  t_8  t_9)  ()))
             (= y_10 (int-ode y dy_9  (y_9  t_9  t_10) ()))
             (= y_11 (int-ode y dy_10 (y_10 t_10 t_11) ()))
             (= y_12 (int-ode y dy_11 (y_11 t_11 t_12) ()))
             (= y_13 (int-ode y dy_12 (y_12 t_12 t_13) ()))
             (= y_14 (int-ode y dy_13 (y_13 t_13 t_14) ()))
             (= y_15 (int-ode y dy_14 (y_14 t_14 t_15) ()))
             (= y_16 (int-ode y dy_15 (y_15 t_15 t_16) ()))
             (= y_17 (int-ode y dy_16 (y_16 t_16 t_17) ()))
             (= y_18 (int-ode y dy_17 (y_17 t_17 t_18) ()))
             (= y_19 (int-ode y dy_18 (y_18 t_18 t_19) ()))
))

;(assert (and (= tau_1_1  (int-ode tau dtau_0  (tau_0_2  t_0  t_1)  ()))
;             (= tau_2_1  (int-ode tau dtau_1  (tau_1_2  t_1  t_2)  ()))
;             (= tau_3_1  (int-ode tau dtau_2  (tau_2_2  t_2  t_3)  ()))
;             (= tau_4_1  (int-ode tau dtau_3  (tau_3_2  t_3  t_4)  ()))
;             (= tau_5_1  (int-ode tau dtau_4  (tau_4_2  t_4  t_5)  ()))
;             (= tau_6_1  (int-ode tau dtau_5  (tau_5_2  t_5  t_6)  ()))
;             (= tau_7_1  (int-ode tau dtau_6  (tau_6_2  t_6  t_7)  ()))
;             (= tau_8_1  (int-ode tau dtau_7  (tau_7_2  t_7  t_8)  ()))
;             (= tau_9_1  (int-ode tau dtau_8  (tau_8_2  t_8  t_9)  ()))
;             (= tau_10_1 (int-ode tau dtau_9  (tau_9_2  t_9  t_10) ()))
;             (= tau_11_1 (int-ode tau dtau_10 (tau_10_2 t_10 t_11) ()))
;             (= tau_12_1 (int-ode tau dtau_11 (tau_11_2 t_11 t_12) ()))
;             (= tau_13_1 (int-ode tau dtau_12 (tau_12_2 t_12 t_13) ()))
;             (= tau_14_1 (int-ode tau dtau_13 (tau_13_2 t_13 t_14) ()))
;             (= tau_15_1 (int-ode tau dtau_14 (tau_14_2 t_14 t_15) ()))
;             (= tau_16_1 (int-ode tau dtau_15 (tau_15_2 t_15 t_16) ()))
;             (= tau_17_1 (int-ode tau dtau_16 (tau_16_2 t_16 t_17) ()))
;             (= tau_18_1 (int-ode tau dtau_17 (tau_17_2 t_17 t_18) ()))
;             (= tau_19_1 (int-ode tau dtau_18 (tau_18_2 t_18 t_19) ()))
;))
(assert (and (= tau_1_1  (int-ode tau_1 dtau_0  (tau_2_0  t_0  t_1)  ()))
             (= tau_1_2  (int-ode tau_1 dtau_1  (tau_2_1  t_1  t_2)  ()))
             (= tau_1_3  (int-ode tau_1 dtau_2  (tau_2_2  t_2  t_3)  ()))
             (= tau_1_4  (int-ode tau_1 dtau_3  (tau_2_3  t_3  t_4)  ()))
             (= tau_1_5  (int-ode tau_1 dtau_4  (tau_2_4  t_4  t_5)  ()))
             (= tau_1_6  (int-ode tau_1 dtau_5  (tau_2_5  t_5  t_6)  ()))
             (= tau_1_7  (int-ode tau_1 dtau_6  (tau_2_6  t_6  t_7)  ()))
             (= tau_1_8  (int-ode tau_1 dtau_7  (tau_2_7  t_7  t_8)  ()))
             (= tau_1_9  (int-ode tau_1 dtau_8  (tau_2_8  t_8  t_9)  ()))
             (= tau_1_10 (int-ode tau_1 dtau_9  (tau_2_9  t_9  t_10) ()))
             (= tau_1_11 (int-ode tau_1 dtau_10 (tau_2_10 t_10 t_11) ()))
             (= tau_1_12 (int-ode tau_1 dtau_11 (tau_2_11 t_11 t_12) ()))
             (= tau_1_13 (int-ode tau_1 dtau_12 (tau_2_12 t_12 t_13) ()))
             (= tau_1_14 (int-ode tau_1 dtau_13 (tau_2_13 t_13 t_14) ()))
             (= tau_1_15 (int-ode tau_1 dtau_14 (tau_2_14 t_14 t_15) ()))
             (= tau_1_16 (int-ode tau_1 dtau_15 (tau_2_15 t_15 t_16) ()))
             (= tau_1_17 (int-ode tau_1 dtau_16 (tau_2_16 t_16 t_17) ()))
             (= tau_1_18 (int-ode tau_1 dtau_17 (tau_2_17 t_17 t_18) ()))
             (= tau_1_19 (int-ode tau_1 dtau_18 (tau_2_18 t_18 t_19) ()))
))

;;; Derivatives connection

(define-fun connect ((dy Dt) (dtau Dt) (on Bool) (pump Bool)) Bool
    (and (=> (and      on       pump ) (and (= dy dy_in ) (= dtau dtau_pump)) )
         (=> (and (not on) (not pump)) (and (= dy dy_in ) (= dtau dtau_wait)) )
         (=> (and (not on)      pump ) (and (= dy dy_out) (= dtau dtau_pump)) )
         (=> (and      on  (not pump)) (and (= dy dy_out) (= dtau dtau_wait)) )
))

(assert (and (connect dy_0  dtau_0  on_0  pump_0 )
             (connect dy_1  dtau_1  on_1  pump_1 )
             (connect dy_2  dtau_2  on_2  pump_2 )
             (connect dy_3  dtau_3  on_3  pump_3 )
             (connect dy_4  dtau_4  on_4  pump_4 )
             (connect dy_5  dtau_5  on_5  pump_5 )
             (connect dy_6  dtau_6  on_6  pump_6 )
             (connect dy_7  dtau_7  on_7  pump_7 )
             (connect dy_8  dtau_8  on_8  pump_8 )
             (connect dy_9  dtau_9  on_9  pump_9 )
             (connect dy_10 dtau_10 on_10 pump_10)
             (connect dy_11 dtau_11 on_11 pump_11)
             (connect dy_12 dtau_12 on_12 pump_12)
             (connect dy_13 dtau_13 on_13 pump_13)
             (connect dy_14 dtau_14 on_14 pump_14)
             (connect dy_15 dtau_15 on_15 pump_15)
             (connect dy_16 dtau_16 on_16 pump_16)
             (connect dy_17 dtau_17 on_17 pump_17)
             (connect dy_18 dtau_18 on_18 pump_18)
))

;;; Jump conditions

(define-fun jump ((on1 Bool)   (on2 Bool)
                  (pump1 Bool) (pump2 Bool)
                  (y2 Real)
                  (tau2_1 Real)(tau2_2 Real)) Bool
    (or (and      on1       pump1       on2       pump2  (<  y2 ymax     ) (= tau2_2 tau2_1))
        (and      on1       pump1  (not on2) (not pump2) (>= y2 ymax     ) (= tau2_2 0))
        (and (not on1) (not pump1) (not on2) (not pump2) (<  tau2_1 delta) (= tau2_2 tau2_1))
        (and (not on1) (not pump1) (not on2)      pump2  (>= tau2_1 delta) (= tau2_2 tau2_1))
        (and (not on1)      pump1  (not on2)      pump2  (>  y2 ymin     ) (= tau2_2 tau2_1))
        (and (not on1)      pump1       on2  (not pump2) (<= y2 ymin     ) (= tau2_2 0))
        (and      on1  (not pump1)      on2  (not pump2) (<  tau2_1 delta) (= tau2_2 tau2_1))
        (and      on1  (not pump1)      on2       pump2  (>= tau2_1 delta) (= tau2_2 tau2_1))
))

;(assert (and (jump on_0  on_1  pump_0  pump_1  y_1  tau_1_1  tau_1_2)
;             (jump on_1  on_2  pump_1  pump_2  y_2  tau_2_1  tau_2_2)
;             (jump on_2  on_3  pump_2  pump_3  y_3  tau_3_1  tau_3_2)
;             (jump on_3  on_4  pump_3  pump_4  y_4  tau_4_1  tau_4_2)
;             (jump on_4  on_5  pump_4  pump_5  y_5  tau_5_1  tau_5_2)
;             (jump on_5  on_6  pump_5  pump_6  y_6  tau_6_1  tau_6_2)
;             (jump on_6  on_7  pump_6  pump_7  y_7  tau_7_1  tau_7_2)
;             (jump on_7  on_8  pump_7  pump_8  y_8  tau_8_1  tau_8_2)
;             (jump on_8  on_9  pump_8  pump_9  y_9  tau_9_1  tau_9_2)
;             (jump on_9  on_10 pump_9  pump_10 y_10 tau_10_1 tau_10_2)
;             (jump on_10 on_11 pump_10 pump_11 y_11 tau_11_1 tau_11_2)
;             (jump on_11 on_12 pump_11 pump_12 y_12 tau_12_1 tau_12_2)
;             (jump on_12 on_13 pump_12 pump_13 y_13 tau_13_1 tau_13_2)
;             (jump on_13 on_14 pump_13 pump_14 y_14 tau_14_1 tau_14_2)
;             (jump on_14 on_15 pump_14 pump_15 y_15 tau_15_1 tau_15_2)
;             (jump on_15 on_16 pump_15 pump_16 y_16 tau_16_1 tau_16_2)
;             (jump on_16 on_17 pump_16 pump_17 y_17 tau_17_1 tau_17_2)
;             (jump on_17 on_18 pump_17 pump_18 y_18 tau_18_1 tau_18_2)
;             (jump on_18 on_19 pump_18 pump_19 y_19 tau_19_1 tau_19_2)
;))
(assert (and (jump on_0  on_1  pump_0  pump_1  y_1  tau_1_1  tau_2_1)
             (jump on_1  on_2  pump_1  pump_2  y_2  tau_1_2  tau_2_2)
             (jump on_2  on_3  pump_2  pump_3  y_3  tau_1_3  tau_2_3)
             (jump on_3  on_4  pump_3  pump_4  y_4  tau_1_4  tau_2_4)
             (jump on_4  on_5  pump_4  pump_5  y_5  tau_1_5  tau_2_5)
             (jump on_5  on_6  pump_5  pump_6  y_6  tau_1_6  tau_2_6)
             (jump on_6  on_7  pump_6  pump_7  y_7  tau_1_7  tau_2_7)
             (jump on_7  on_8  pump_7  pump_8  y_8  tau_1_8  tau_2_8)
             (jump on_8  on_9  pump_8  pump_9  y_9  tau_1_9  tau_2_9)
             (jump on_9  on_10 pump_9  pump_10 y_10 tau_1_10 tau_2_10)
             (jump on_10 on_11 pump_10 pump_11 y_11 tau_1_11 tau_2_11)
             (jump on_11 on_12 pump_11 pump_12 y_12 tau_1_12 tau_2_12)
             (jump on_12 on_13 pump_12 pump_13 y_13 tau_1_13 tau_2_13)
             (jump on_13 on_14 pump_13 pump_14 y_14 tau_1_14 tau_2_14)
             (jump on_14 on_15 pump_14 pump_15 y_15 tau_1_15 tau_2_15)
             (jump on_15 on_16 pump_15 pump_16 y_16 tau_1_16 tau_2_16)
             (jump on_16 on_17 pump_16 pump_17 y_17 tau_1_17 tau_2_17)
             (jump on_17 on_18 pump_17 pump_18 y_18 tau_1_18 tau_2_18)
             (jump on_18 on_19 pump_18 pump_19 y_19 tau_1_19 tau_2_19)
))
