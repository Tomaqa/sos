;;;; Thermostat in SMT+ODE format
;; `y' denotes water level
;; `delta' denotes latency of pump command
;; `tau' controls latency progress
;;   and is zeroed after executing pump command
;; `pump' denotes pump or wait mode
;; `on' stands for inflow mode
;; Additional invariants are reasonable:
;; `y >= 0 & y <= tank_volume'


;;; Constants

(define-fun t0   () Real 0)

(define-fun y0   () Real 60)
(define-fun tau0 () Real  0)

(define-fun on0   () Bool true)
(define-fun pump0 () Bool true)

#define YMIN 30
#define YMAX 80

#define INFLOW 40
#define OUTFLOW 20

#define DELTA 1

#define T 0.35

#define STEPS 19
#define STEPS-1 $d(- #STEPS 1)

;;; Invariants

(assert (> #INFLOW #OUTFLOW))

;;; Declarations

#def DECL_CONSTS(const type)
#for (i 0 #STEPS)
    (declare-fun #const##_#i () #type)
#endfor
#enddef

#DECL_CONSTS(t      Real)
#DECL_CONSTS(y      Real)
#DECL_CONSTS(tau_1  Real)
#DECL_CONSTS(tau_2  Real)

#DECL_CONSTS(on    Bool)
#DECL_CONSTS(pump  Bool)

#DECL_CONSTS(dy    Dt)
#DECL_CONSTS(dtau  Dt)

;;; Initializations

(assert (and (= t_0 t0) (= y_0 y0)
             (= tau_1_0 tau_2_0 tau0)
             (= on_0 on0) (= pump_0 pump0)
))

;;; Derivatives definition

(define-dt y dy_in  () (- #INFLOW #OUTFLOW))
(define-dt y dy_out () (- #OUTFLOW))

(define-dt tau dtau_wait () 1)
(define-dt tau dtau_pump () 0)

;;; Derivatives connection

(define-fun connect ((dy Dt) (dtau Dt) (on Bool) (pump Bool)) Bool
    (and (=> (and      on       pump ) (and (= dy dy_in ) (= dtau dtau_pump)) )
         (=> (and (not on) (not pump)) (and (= dy dy_in ) (= dtau dtau_wait)) )
         (=> (and (not on)      pump ) (and (= dy dy_out) (= dtau dtau_pump)) )
         (=> (and      on  (not pump)) (and (= dy dy_out) (= dtau dtau_wait)) )
))

#def CONNECTS
#for (i 0 #STEPS)
    (connect dy_#i dtau_#i on_#i pump_#i)
#endfor
#enddef

(assert (and #CONNECTS))

;;; Jump conditions

(define-fun jump ((on1 Bool)   (on2 Bool)
                  (pump1 Bool) (pump2 Bool)
                  (y2 Real)
                  (tau2_1 Real)(tau2_2 Real)) Bool
    (or (and      on1       pump1       on2       pump2  (<  y2 #YMAX     ) (= tau2_2 tau2_1))
        (and      on1       pump1  (not on2) (not pump2) (>= y2 #YMAX     ) (= tau2_2 0))
        (and (not on1) (not pump1) (not on2) (not pump2) (<  tau2_1 #DELTA) (= tau2_2 tau2_1))
        (and (not on1) (not pump1) (not on2)      pump2  (>= tau2_1 #DELTA) (= tau2_2 tau2_1))
        (and (not on1)      pump1  (not on2)      pump2  (>  y2 #YMIN     ) (= tau2_2 tau2_1))
        (and (not on1)      pump1       on2  (not pump2) (<= y2 #YMIN     ) (= tau2_2 0))
        (and      on1  (not pump1)      on2  (not pump2) (<  tau2_1 #DELTA) (= tau2_2 tau2_1))
        (and      on1  (not pump1)      on2       pump2  (>= tau2_1 #DELTA) (= tau2_2 tau2_1))
))

#def JUMPS
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (jump on_#i on_#j pump_#i pump_#j y_#j tau_1_#j tau_2_#j)
#endlet j
#endfor
#enddef

(assert (and #JUMPS))

;;; Steps definition

#def T_STEPS
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (= t_#j  (+ t_#i  #T))
#endlet j
#endfor
#enddef

(assert (and #T_STEPS))

;;; Integration

#def INT_ODE(f ivar ovar)
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (= #ovar##_#j (int-ode #f d#f##_#i (#ivar##_#i t_#i t_#j) ()) )
#endlet j
#endfor
#enddef

(assert (and #INT_ODE(y y y)
             #INT_ODE(tau tau_2 tau_1)
))
