;;;; Thermostat in SMT+ODE format

;;; Constants

(define-fun t0 () Real 0)
(define-fun x0 () Real 60)
(define-fun on0 () Bool false)

#define XMAX 100
#define XMIN 50

#define T 0.25

#define STEPS 100
#define STEPS-1 $d(- #STEPS 1)

;;; Declarations

#def DECL_CONSTS(const type)
#for (i 0 #STEPS)
    (declare-fun #const##_#i () #type)
#endfor
#enddef

#DECL_CONSTS(t      Real)
#DECL_CONSTS(x      Real)

#DECL_CONSTS(on     Bool)

#DECL_CONSTS(dx     Dt)

;;; Initializations

(assert (and (= t_0 t0) (= x_0 x0) (= on_0 on0)))

;;; Derivatives definition

(define-dt x dx_on  () (- #XMAX x))
(define-dt x dx_off () (- #XMIN x))

;;; Derivatives connection

(define-fun connect ((dx Dt) (on Bool)) Bool
    (and (=>      on  (= dx dx_on ))
         (=> (not on) (= dx dx_off))
))

#def CONNECTS
#for (i 0 #STEPS)
    (connect dx_#i on_#i)
#endfor
#enddef

(assert (and #CONNECTS))

;;; Jump conditions

(define-fun jump ((on1 Bool) (on2 Bool) (x2 Real)) Bool
    (and (=> (and      on1  (<  x2 77) )      on2  )
         (=> (and      on1  (>= x2 77) ) (not on2) )
         (=> (and (not on1) (>  x2 73) ) (not on2) )
         (=> (and (not on1) (<= x2 73) )      on2  )
))

#def JUMPS
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (jump on_#i on_#j x_#j)
#endlet j
#endfor
#enddef

(assert (and #JUMPS))

;;; Steps definition

#def T_STEPS
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (= t_#j  (+ t_#i  #T))
#endlet j
#endfor
#enddef

(assert (and #T_STEPS))

;;; Integration

#def INT_ODE(f ivar ovar)
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (= #ovar##_#j (int-ode #f d#f##_#i (#ivar##_#i t_#i t_#j) ()) )
#endlet j
#endfor
#enddef

(assert (and #INT_ODE(x x x)
))
