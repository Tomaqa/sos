;;;; Thermostat in SMT+ODE format

;;; Literals

#define DT_OFF_X_MIN 50  ;; lower bound ignoring invariants
#define DT_ON_X_MAX 100  ;; upper bound ignoring invariants

#define X_MIN 70  ;; minimum permitted temperature
#define X_MAX 80  ;; maximum permitted temperature

#define SWITCH_X_MIN 73  ;; lower switching threshold
#define SWITCH_X_MAX 77  ;; upper switching threshold

;; Fixed period of checking invariants... which value to choose?
#define T 0.25  ;; experiment with this
(define-ode-step $(/ #T 5))  ;; permissive integration step size
#define T_MIN()   0  ;; time at which to start the verification
#define T_MAX()  60  ;; time until which to provide verification

#define STEPS $d(+ $(/ (- #T_MAX #T_MIN) #T) )
#define STEPS-1 $d(- #STEPS 1)

;;; Declarations

#def DECL_CONSTS(const type)
#for (i 0 #STEPS)
    (declare-fun #const##_#i () #type)
#endfor
#enddef

#DECL_CONSTS(t      Real)
#DECL_CONSTS(x      Real)

#DECL_CONSTS(on     Bool)

#DECL_CONSTS(dx     Dt)

;;; Initializations

#def _INIT_INTERVAL(var val max step)
#if $(<= #val #max)
    (= #var #val)
    #_INIT_INTERVAL(#var $(+ #val #step) #max #step)
#endif
#enddef
#def INIT_INTERVAL(var min max step)
    (or #_INIT_INTERVAL(#var #min #max #step))
#enddef

;; Choose some initial value between the permitted bounds
#define INIT_X() #INIT_INTERVAL(x_0 #X_MIN #X_MAX 0.25)

(assert (and (= t_0 #T_MIN)
             #INIT_X
             (not on_0)
))

;;; Derivatives definition

(define-dt x dx_on  () (- #DT_ON_X_MAX  x))
(define-dt x dx_off () (- #DT_OFF_X_MIN x))

;;; Invariants

(define-fun invariant ( (t Real) (x Real) (dx Dt) ) Bool
    (and (<= #X_MIN x #X_MAX)
         (or (= dx dx_on) (= dx dx_off))
))

#def INVARIANTS
#for (i 0 #STEPS)
    (invariant t_#i x_#i dx_#i)
#endfor
#enddef

(assert (and #INVARIANTS ))

;;; Derivatives connection

(define-fun connect ((dx Dt) (on Bool)) Bool
    (and (=>      on  (= dx dx_on ))
         (=> (not on) (= dx dx_off))
))

#def CONNECTS
#for (i 0 #STEPS)
    (connect dx_#i on_#i)
#endfor
#enddef

(assert (and #CONNECTS ))

;;; Jump conditions

(define-fun jump ((on1 Bool) (on2 Bool) (x2 Real)) Bool
    (and (=> (and      on1  (<  x2 #SWITCH_X_MAX) )      on2  )
         (=> (and      on1  (>= x2 #SWITCH_X_MAX) ) (not on2) )
         (=> (and (not on1) (>  x2 #SWITCH_X_MIN) ) (not on2) )
         (=> (and (not on1) (<= x2 #SWITCH_X_MIN) )      on2  )
))

#def JUMPS
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (jump on_#i on_#j x_#j)
#endlet j
#endfor
#enddef

(assert (and #JUMPS ))

;;; Steps definition

#def T_STEPS
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (= t_#j  (+ t_#i  #T))
#endlet j
#endfor
#enddef

(assert (and #T_STEPS ))

;;; Integration

#def INT_ODE(var)
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (= #var##_#j (int-ode #var d#var##_#i (#var##_#i t_#i t_#j) ()) )
#endlet j
#endfor
#enddef

(assert (and #INT_ODE(x) ))
