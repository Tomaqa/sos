;;;; Thermostat in SMT+ODE format

;;; Constants

(define-fun t0 () Real 0.0)
(define-fun x0 () Real 60.0)
(define-fun on0 () Bool false)

(define-fun T () Real 0.25)

;;; Declarations

(declare-fun t_0 () Real)
(declare-fun t_1 () Real)
(declare-fun t_2 () Real)
(declare-fun t_3 () Real)
(declare-fun t_4 () Real)
(declare-fun t_5 () Real)
(declare-fun t_6 () Real)
(declare-fun t_7 () Real)
(declare-fun t_8 () Real)
(declare-fun t_9 () Real)

(declare-fun x_0 () Real)
(declare-fun x_1 () Real)
(declare-fun x_2 () Real)
(declare-fun x_3 () Real)
(declare-fun x_4 () Real)
(declare-fun x_5 () Real)
(declare-fun x_6 () Real)
(declare-fun x_7 () Real)
(declare-fun x_8 () Real)
(declare-fun x_9 () Real)

(declare-fun on_0 () Bool)
(declare-fun on_1 () Bool)
(declare-fun on_2 () Bool)
(declare-fun on_3 () Bool)
(declare-fun on_4 () Bool)
(declare-fun on_5 () Bool)
(declare-fun on_6 () Bool)
(declare-fun on_7 () Bool)
(declare-fun on_8 () Bool)
(declare-fun on_9 () Bool)

(declare-fun dx_0 () Real)
(declare-fun dx_1 () Real)
(declare-fun dx_2 () Real)
(declare-fun dx_3 () Real)
(declare-fun dx_4 () Real)
(declare-fun dx_5 () Real)
(declare-fun dx_6 () Real)
(declare-fun dx_7 () Real)
(declare-fun dx_8 () Real)

;;; Initializations

(assert (and (= t_0 t0) (= x_0 x0) (= on_0 on0)))

;;; Steps definition

(assert (and (= t_1 (+ t_0 T))
             (= t_2 (+ t_1 T))
             (= t_3 (+ t_2 T))
             (= t_4 (+ t_3 T))
             (= t_5 (+ t_4 T))
             (= t_6 (+ t_5 T))
             (= t_7 (+ t_6 T))
             (= t_8 (+ t_7 T))
             (= t_9 (+ t_8 T))
))

;;; Derivatives definition

;(define-dt dx_on  x (- 100.0 x))
;(define-dt dx_off x (-  50.0 x))
(define-dt dx_on  (- 100.0 x))
(define-dt dx_off (-  50.0 x))

;;; Derivatives connection

(define-fun connect ((on1 Bool) (dx1 Real)
                     (t1 Real)  (t2 Real)
                     (x1 Real)  (x2 Real)) Bool
    (and (or (and      on1  (= dx1 dx_on ))
             (and (not on1) (= dx1 dx_off)) )
         (= x2 (dt-int dx1 t1 t2 x1))
    )
)

(assert (and (connect on_0 dx_0 t_0 t_1 x_0 x_1)
             (connect on_1 dx_1 t_1 t_2 x_1 x_2)
             (connect on_2 dx_2 t_2 t_3 x_2 x_3)
             (connect on_3 dx_3 t_3 t_4 x_3 x_4)
             (connect on_4 dx_4 t_4 t_5 x_4 x_5)
             (connect on_5 dx_5 t_5 t_6 x_5 x_6)
             (connect on_6 dx_6 t_6 t_7 x_6 x_7)
             (connect on_7 dx_7 t_7 t_8 x_7 x_8)
             (connect on_8 dx_8 t_8 t_9 x_8 x_9)
))

;;;;;;

;(define-fun dx_on_mode  ((on Bool)) Bool on)
;(define-fun dx_off_mode ((on Bool)) Bool (not on))

;(connect ((dx_on  x)) (dx_on_mode  on_0) x_1)
;(connect ((dx_off x)) (dx_off_mode on_0) x_1)

;(connect dx_on  ((on Bool)) on)
;(connect dx_off ((on Bool)) (not on))

;(connect dx_on  mode_on)
;(connect dx_off mode_off)

(declare-ode x ((dx_on mode_on) (dx_off mode_off)) (Bool))

;(define-fun mode_on  ((on Bool)) on)
;(define-fun mode_off ((on Bool)) (not on))
(define-mode mode_on  (on) on)
(define-mode mode_off (on) (not on))

(dt-int x (t_0 t_1) (x_0 x_1) (on_0))

==>

(define-fun mode_on  ((on Bool)) on)
(define-fun mode_off ((on Bool)) (not on))

(define-fun connect ((on Bool) (dx Real)) Bool
    (or (and (mode_on  on) (= dx dx_on))
        (and (mode_off on) (= dx dx_off)))
)

(assert (and (connect on_0 dx_0)
))

(assert (and (= x_1 dt-int_0)
))

;;; Jump conditions

(define-fun jump ((on1 Bool) (on2 Bool) (x2 Real)) Bool
    (or (and      on1       on2  (<  x2 77.0))
        (and      on1  (not on2) (>= x2 77.0))
        (and (not on1) (not on2) (>  x2 73.0))
        (and (not on1)      on2  (<= x2 73.0)) )
)

(assert (and (jump on_0 on_1 x_1)
             (jump on_1 on_2 x_2)
             (jump on_2 on_3 x_3)
             (jump on_3 on_4 x_4)
             (jump on_4 on_5 x_5)
             (jump on_5 on_6 x_6)
             (jump on_6 on_7 x_7)
             (jump on_7 on_8 x_8)
             (jump on_8 on_9 x_9)
))
