;;;; Car steering model in SMT+ODE format
;; `(p, gam, c)' is continuous state
;; `p' denotes horizontal position of car
;; `gam' denotes heading angle
;; `c' denotes internal timer
;; `(correct, left, ahead, canal)' is discrete state


;;; Constants

(define-fun p_lo  () Real (- 1))
(define-fun p_hi  () Real    1 )
(define-fun p_min () Real (- 1.5 ))

(define-fun t0   () Real 0)

(define-fun p0   () Real 0)
(define-fun gam0 () Real 0.15)
(define-fun c0   () Real 0)

(define-fun correct0 () Bool false)
(define-fun left0    () Bool false)
(define-fun ahead0   () Bool true)
(define-fun canal0   () Bool false)

#define PI 3.14159265

#define R  5
#define OM 2

#define T 0.35

;#define STEPS 10
#define STEPS 10
;#define STEPS 1000
#define STEPS-1 $d(- #STEPS 1)

;;; Constant invariants

(assert (and (>  p_hi  p_lo)
             (<  p_min p_lo)
             (>= p0    p_lo)
             (<= p0    p_hi)
             (>= gam0 (- (/ #PI 4)))
             (<= gam0    (/ #PI 4) )
))

;;; Declarations

#def DECL_CONSTS(const type)
#for (i 0 #STEPS)
    (declare-fun #const##_#i () #type)
#endfor
#enddef

#DECL_CONSTS(t    Real)
#DECL_CONSTS(p    Real)
#DECL_CONSTS(gam  Real)
#DECL_CONSTS(c_1  Real)
#DECL_CONSTS(c_2  Real)

#DECL_CONSTS(correct  Bool)
#DECL_CONSTS(left     Bool)
#DECL_CONSTS(ahead    Bool)
#DECL_CONSTS(canal    Bool)

#DECL_CONSTS(dp    Dt)
#DECL_CONSTS(dgam  Dt)
#DECL_CONSTS(dc    Dt)

;;; Initializations

(assert (and (= t_0 t0)
             (= p_0 p0) (= gam_0 gam0)
             (= c_1_0 c_2_0 c0)
             (= correct_0 correct0) (= left_0 left0)
             (= ahead_0 ahead0) (= canal_0 canal0)
))

;;; Steps definition

#def T_STEPS
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (= t_#j  (+ t_#i  #T))
#endlet j
#endfor
#enddef

(assert (and #T_STEPS))

;;; Derivatives definition

(define-dt p dp_move (gam) (* (- #R) (sin gam)))
(define-dt p dp_fail (gam) 0)

(define-dt gam dgam_left  () (- #OM))
(define-dt gam dgam_right ()    #OM )
(define-dt gam dgam_ahead ()      0 )

(define-dt c dc_inc  ()    1 )
(define-dt c dc_dec  () (- 2))
(define-dt c dc_idle ()    0 )

;;; Integration

#def ASSERT_INT_ODE(f ivar ovar param empty)
(assert (and
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
#let par #if $(not #empty) #param##_#i #endif
    (= #ovar##_#j (int-ode #f d#f##_#i (#ivar##_#i t_#i t_#j) (#par)) )
#endlet par
#endlet j
#endfor
))
#enddef

#ASSERT_INT_ODE(p p p gam 0)
#ASSERT_INT_ODE(gam gam gam ## 1)
#ASSERT_INT_ODE(c c_2 c_1 ## 1)

;;; Derivatives connection

(define-fun connect ( (dp Dt) (dgam Dt) (dc Dt)
                      (correct Bool) (left Bool)
                      (ahead Bool) (canal Bool) ) Bool
    (and (=>      canal           (and (= dp dp_fail     )
                                       (= dgam dgam_ahead)
                                       (= dc dc_idle     ) ))
         (=> (not canal)               (= dp dp_move     )  )
         (=>      ahead           (and (= dgam dgam_ahead)
                                       (= dc dc_idle     ) ))
         (=> (and      left             )    (= dgam dgam_left )  )
         (=> (and (not canal) (not left) (not ahead)) (= dgam dgam_right))
         (=> (and (not canal) (not ahead)      correct)  (= dc dc_dec )  )
         (=> (and (not canal) (not ahead) (not correct)) (= dc dc_inc )  )
))

#def CONNECTS
#for (i 0 #STEPS)
    (connect dp_#i dgam_#i dc_#i correct_#i left_#i ahead_#i canal_#i)
#endfor
#enddef

(assert (and #CONNECTS))

;;; States conditions

(define-fun states ( (correct Bool) (left Bool)
                      (ahead Bool) (canal Bool) ) Bool
    (and (=>      canal           (and (not correct) (not left) (not ahead) ))
         (=>    correct           (and (not canal)                          ))
         (=>      ahead           (and (not canal)   (not left)             ))
         (=>       left           (and (not canal)              (not ahead) ))
))

#def STATES
#for (i 0 #STEPS)
    (states correct_#i left_#i ahead_#i canal_#i)
#endfor
#enddef

(assert (and #STATES))

;;; Jump conditions

(define-fun jump ((correct1 Bool) (correct2 Bool)
                  (left1    Bool) (left2    Bool)
                  (ahead1   Bool) (ahead2   Bool)
                  (canal1   Bool) (canal2   Bool)
                  (p2       Real)
                  (c2_1     Real) (c2_2     Real)) Bool
    (and (=> (and (not correct1) (not left1)      ahead1  (not canal1) )
             (and (=> (and (> p2  p_lo) (< p2  p_hi))
                      (and (not correct2) (not left2)      ahead2  (not canal2)
                           (= c2_2 c2_1) ))
                  (=> (and (<= p2  p_lo))
                      (and (not correct2)      left2  (not ahead2) (not canal2)
                           (= c2_2 0) ))
                  (=> (and (>= p2  p_hi))
                      (and (not correct2) (not left2) (not ahead2) (not canal2)
                           (= c2_2 0) ))
         ))
         (=> (and (not correct1)      left1  (not ahead1) (not canal1) )
             (and (=> (and (>  p2 p_min) (< p2  p_lo))
                      (and (not correct2)      left2  (not ahead2) (not canal2) ))
                  (=> (and (>= p2 p_lo))
                      (and      correct2  (not left2) (not ahead2) (not canal2) ))
                  (=> (and (<= p2 p_min))
                      (and (not correct2) (not left2) (not ahead2)      canal2  ))
                  (= c2_2 c2_1)
         ))
         (=> (and (not correct1) (not left1) (not ahead1) (not canal1) )
             (and (=> (and (<  p2 p_hi))
                      (and (not correct2) (not left2) (not ahead2) (not canal2) ))
                  (=> (and (>= p2 p_hi))
                      (and      correct2       left2  (not ahead2) (not canal2) ))
                  (= c2_2 c2_1)
         ))
         (=> (and (not correct1) (not left1) (not ahead1)      canal1  )
             (and (not correct2) (not left2) (not ahead2)      canal2
                  (= c2_2 c2_1)
         ))
         (=> (and      correct1       left1  (not ahead1) (not canal1) )
             (and (=> (and (>  c2_1 0) (>  p2 p_lo))
                      (and      correct2       left2  (not ahead2) (not canal2)
                           (= c2_2 c2_1) ))
                  (=> (and (<= p2 p_lo))
                      (and (not correct2)      left2  (not ahead2) (not canal2)
                           (= c2_2 0) ))
                  (=> (and (<= c2_1 0) (>  p2 p_lo))
                      (and      correct2  (not left2)      ahead2  (not canal2)
                           (= c2_2 c2_1) ))
         ))
         (=> (and      correct1  (not left1) (not ahead1) (not canal1) )
             (and (=> (and (>  c2_1 0) (<  p2 p_hi))
                      (and      correct2  (not left2) (not ahead2) (not canal2)
                           (= c2_2 c2_1) ))
                  (=> (and (>= p2 p_hi))
                      (and (not correct2) (not left2) (not ahead2) (not canal2)
                           (= c2_2 0) ))
                  (=> (and (<= c2_1 0) (<  p2 p_hi))
                      (and      correct2  (not left2)      ahead2  (not canal2)
                           (= c2_2 c2_1) ))
         ))
         (=> (and      correct1  (not left1)      ahead1  (not canal1) )
             (and      correct2  (not left2)      ahead2  (not canal2)
                  (= c2_2 c2_1)
         ))
))

#def JUMPS
#for (i 0 #STEPS-1)
#let j $d(+ #i 1)
    (jump correct_#i correct_#j left_#i left_#j ahead_#i ahead_#j canal_#i canal_#j p_#j c_1_#j c_2_#j)
#endlet j
#endfor
#enddef

(assert (and #JUMPS))
