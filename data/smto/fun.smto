;;;; Function choosing model in SMT+ODE format
;; `y' is continuous state

;;; Constants

#define PI 3.14159

#define COEF 2.5
#define HALF_COEF $(/ #COEF 2)

#define T 0.4
(define-ode-step $(/ #T 10))

#define T_MIN()    0
#define T_MAX()   30

#define STEPS $d(+ $(/ (- #T_MAX #T_MIN) #T) )
#define STEPS-1 $d(- #STEPS 1)

;;; Constant invariants


;;; Declarations

#def DECL_CONSTS(const type)
#for (i 0 #STEPS)
    (declare-fun #const##_#i () #type)
#endfor
#enddef

#DECL_CONSTS(t     Real)
#DECL_CONSTS(high  Real)
#DECL_CONSTS(low   Real)
#DECL_CONSTS(y     Real)

#DECL_CONSTS(dhigh Dt)
#DECL_CONSTS(dlow  Dt)
#DECL_CONSTS(dy    Dt)

;;; Initializations

#define INIT_T()   (= t_0 #T_MIN)

#def _INIT_INTERVAL(var val max step)
#if $(<= #val #max)
    (= #var #val)
    #_INIT_INTERVAL(#var $(+ #val #step) #max #step)
#endif
#enddef
#def INIT_INTERVAL(var min max step)
    (or #_INIT_INTERVAL(#var #min #max #step))
#enddef

#define INIT_HIGH() #HALF_COEF
#define INIT_LOW() -#HALF_COEF

#define INIT_Y() #INIT_INTERVAL(y_0 #INIT_LOW #INIT_HIGH 0.25)

(assert (and #INIT_T
             (= high_0 #INIT_HIGH)
             (= low_0 #INIT_LOW)
             #INIT_Y
))

;;; Derivatives definition

(define-dt high dhigh () (- t (* high (sin high))))

(define-dt low dlow () (- (/ t #COEF) (* low (sin (* low #COEF)))))

(define-dt y dy_inc () y)
(define-dt y dy_dec () (- y))
;(define-dt y dy_inc () (* t #HALF_COEF))
;(define-dt y dy_dec () (- (* t #HALF_COEF)))
;#define T_COEF $(/ 0.33 #T)
;(define-dt y dy_inc () (* t #T_COEF))
;(define-dt y dy_dec () (- (* t #T_COEF)))
;(define-dt y dy_inc () #COEF)
;(define-dt y dy_dec () (- #COEF))

;;; Invariants

(define-fun invariant ( (t Real) (high Real) (low Real) (y Real)
                        (dhigh_ Dt) (dlow_ Dt) (dy_ Dt)
                      ) Bool
    (and (<= low y high)
         (= dhigh_ dhigh) (= dlow_ dlow)
         (or (= dy_ dy_inc) (= dy_ dy_dec))
))

#def INVARIANTS
#for (i 0 #STEPS)
    (invariant t_#i high_#i low_#i y_#i
               dhigh_#i dlow_#i dy_#i)
#endfor
#enddef

(assert (and #INVARIANTS))

;;; Derivatives connection

;;; Jump conditions

;;; Steps definition

#def T_STEPS
#for (i 0 $(- #STEPS 1))
#let j $d(+ #i 1)
    (= t_#j  (+ t_#i  #T))
#endlet j
#endfor
#enddef

(assert (and #T_STEPS))

;;; Integration

#def ASSERT_INT_ODE(f)
(assert (and
#for (i 0 $(- #STEPS 1))
#let j $d(+ #i 1)
    (= #f##_#j (int-ode #f d#f##_#i (#f##_#i t_#i t_#j) ()) )
#endlet j
#endfor
))
#enddef

#ASSERT_INT_ODE(high)
#ASSERT_INT_ODE(low )
#ASSERT_INT_ODE(y   )
